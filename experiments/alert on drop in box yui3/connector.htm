<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
		<title>Untitled Document</title>
		<style type="text/css">
			.topHandle,.bottomHandle{
				border:		1px solid black;
				width: 		5px;
				height:		5px;
				position:	fixed;
				z-index:	100;
			}
			.topHoriz,.bottomHoriz {
				background:	#ff0000;
				height:		3px;
				position:	fixed;
				z-index:	-1;
			}
			.vert{
				background:	#ff0000;
				width:		3px;
				position:	fixed;
				z-index:	-1;
			}

			
		</style>
		
		<!--<script type="text/javascript" src="http://yui.yahooapis.com/combo?3.0.0/build/yui/yui.js"></script>-->
		<script type="text/javascript" src="lib/yui/yui/yui-min.js"></script>
		<script type="text/javascript">
		function init() {
			YUI({
				filter:'min'
			}).use('dd-drag','dd-drop','dd-proxy','node','event', function (Y) {
				function handleMoved(handle) {
					
					var topHoriz 		= handle.connectorNodes['topHoriz'];
					var vert 			= handle.connectorNodes['vert'];
					var bottomHoriz 	= handle.connectorNodes['bottomHoriz'];
					var topHandle 		= handle.connectorNodes['topHandle'];
					var bottomHandle	= handle.connectorNodes['bottomHandle'];
					
					/* get and calculate */
					var topHandle_top		= topHandle.getY();
					var topHandle_left		= topHandle.getX();
					var bottomHandle_top	= bottomHandle.getY();
					var bottomHandle_left	= bottomHandle.getX();
					
					var topOffset = 0;
					var leftOffset = 0;
					if (topHandle_top > bottomHandle_top) 	{ topOffset = -1 }
					if (topHandle_left > bottomHandle_left) { leftOffset = -1 }

					/* TODO: this can prob be simplified with something like handleDelta */
					var topHoriz_width		= Math.abs(Math.floor((topHandle_left - bottomHandle_left)/2))+3;
					var topHoriz_top		= topHandle_top + 2;
					var topHoriz_left		= topHandle_left + 2 + (leftOffset * topHoriz_width);

					var vert_height			= Math.abs(Math.floor(topHandle_top - bottomHandle_top))+3;
					var vert_top			= topHoriz_top + (topOffset * vert_height);
					var vert_left			= topHoriz_left - 3 + topHoriz_width + (leftOffset * topHoriz_width);

					var bottomHoriz_width	= Math.abs(Math.floor((topHandle_left - bottomHandle_left)/2))+3;
					var bottomHoriz_left	= vert_left + (leftOffset * bottomHoriz_width);
					var bottomHoriz_top		= vert_top - 3 + vert_height + (topOffset * vert_height);

					/* set */
					topHoriz.setY(topHoriz_top);
					topHoriz.setX(topHoriz_left);
					topHoriz.setStyle('width',topHoriz_width + 'px');

					vert.setY(vert_top);
					vert.setX(vert_left);
					vert.setStyle('height',vert_height + 'px');
					
					bottomHoriz.setY(bottomHoriz_top);
					bottomHoriz.setX(bottomHoriz_left);
					bottomHoriz.setStyle('width',bottomHoriz_width + 'px');
				}
				
				function newConnector(thl,tht,bhl,bht) {
					/* TODONE:giving nodes references to other parts of the connector would
					 * remove the need to look them up using classes for EACH MOVE
					 * TODO: check if all this class rubbish is then still needed or if
					 * the node hash table can be always be used.
					 */ 
					var topHandleId 	= Y.guid('topHandle_');
					var bottomHandleId 	= Y.guid('bottomHandle_');
					
					var topHandle 	= Y.Node.create('<div id="' 
													+ topHandleId
													+ '" class="'
													+ bottomHandleId
													+ ' topHandle"></div>');
					var bottomHandle = Y.Node.create('<div id="' 
													 + bottomHandleId
													 + '" class="'
													+ topHandleId
													+ ' bottomHandle"></div>');
					var topHoriz 	= Y.Node.create('<div id="" class="'
													+ topHandleId + ' ' + bottomHandleId
													+ ' topHoriz"></div>');
					var vert 		= Y.Node.create('<div id="" class="'
													+ topHandleId + ' ' + bottomHandleId
													+ ' vert"></div>');
					var bottomHoriz = Y.Node.create('<div id="" class="'
													+ topHandleId + ' ' + bottomHandleId
													+ ' bottomHoriz"></div>');
													
					var body = Y.one('body');
					
					connectorNodes = {
						'topHandle':	topHandle,
						'topHoriz':		topHoriz,
						'vert':			vert,
						'bottomHoriz':	bottomHoriz,
						'bottomHandle':	bottomHandle
					}
					/*[topHandle,topHoriz,vert,bottomHoriz,bottomHandle]*/
					for (var i in connectorNodes) {
						connectorNodes[i].connectorNodes = connectorNodes;
						body.appendChild(connectorNodes[i]);
					}
					
					topHandle.setX(thl);
					topHandle.setY(tht);
					bottomHandle.setX(bhl);
					bottomHandle.setY(bht);
					

					var ddTop 		= new Y.DD.Drag({node:topHandle});
					ddTop.jd_node 	= topHandle;
					var ddBottom 	= new Y.DD.Drag({node:bottomHandle});
					ddBottom.jd_node = bottomHandle;
					
					handleMoved(topHandle);
				}
				
				//Listen for all drag:drag events
			    Y.DD.DDM.on('drag:drag', function(e) {
			        var handle = e.target.jd_node;
					handleMoved(handle);
			    });
				
				newConnector(30,30,90,60);
				newConnector(300,300,390,360);
			});
		}

		</script>
	</head>
	<body onload="init()">
		<p id="svndata">$HeadURL$ $Id$</p>

	</body>
</html>
